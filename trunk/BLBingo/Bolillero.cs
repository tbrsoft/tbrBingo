///////////////////////////////////////////////////////////
//  Bolillero.cs
//  Implementation of the Class Bolillero
//  Generated by Enterprise Architect
//  Created on:      07-Ago-2009 09:05:08 p.m.
//  Original author: Paliza Andres
///////////////////////////////////////////////////////////

using System;
namespace BLBingo
{
    public class Bolillero
    {
        /// <summary>
        /// Devuelve los numeros extraidos hasta el momento.
        /// </summary>
        private tList m_ExtractedNumbers;
        private int m_Max;
        private int m_Min;
        //Tengo una lista con los numeros que no salieron, eso hace mas efectiva la forma de sacar bolillas
        private tList m_NumberLeft;
        private Random r;
     
        public Bolillero(int pMin,int pMax)
        {
            m_NumberLeft = new tList();
            m_ExtractedNumbers = new tList();

            for (int i = pMin; i <= pMax ; i++)
            {
                m_NumberLeft.Add(i);//carga TODOS los numeros como faltantes
            }
            r = new Random(DateTime.Now.Millisecond);

        }
#warning decidir que coleccion usar

        #region Propiedades
        public tList ExtractedNumbers
        {
            get
            {
                return m_ExtractedNumbers;
            }
            set
            {
                m_ExtractedNumbers = value;
            }
        }
        public int Max
        {
            get
            {
                return m_Max;
            }
            set
            {
                m_Max = value;
            }
        }

        public int Min
        {
            get
            {
                return m_Min;
            }
            set
            {
                m_Min = value;
            }
        }
        #endregion

        /// <summary>
        /// Retorna un numero aleatorio entre min y max sin repetir.
        /// </summary>
        public int GetNumber()
        {
            if (m_NumberLeft.Count > 0)
            {
                int ret = 0;
                #warning andres. else maximo usado MemberAccessException suena mal
                int n = r.Next(0, m_NumberLeft.Count);
                ret = m_NumberLeft[n];
                m_ExtractedNumbers.Add(ret);
                m_NumberLeft.RemoveAt(n);
                return ret;
            }else{ 
                #warning Hacer algo mejor que esto??
                return -1;//bandera de que se sortearon todos los numeros
            }

            //return 4; debian version ?
        }

        /// <summary>
        /// Llamar a esta funcion cuando el sorteo es manual.
        /// </summary>
        /// <param name="pNumber"></param>
        /// <returns>True si se pudo insertar, false si esta repetido o fuera del rango.</returns>
        public bool InsertNumber(int pNumber)
        {
            bool ret = false;
            if (m_NumberLeft.Remove(pNumber))
            {
                m_ExtractedNumbers.Add(pNumber);
                ret = true;
            }
            return ret;
        }       


    }//end Bolillero 
}