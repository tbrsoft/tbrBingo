///////////////////////////////////////////////////////////
//  Sorteo.cs
//  Implementation of the Class Sorteo
//  Generated by Enterprise Architect
//  Created on:      07-Ago-2009 09:05:06 p.m.
//  Original author: tbrSoft
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using DataBaseManager;
using System.Data;
namespace BLBingo
{
    public class Sorteo 
    {
        private eEstadoSorteo m_EstadoSorteo;//1 no iniciado, 2 en juego, 3 finalizado
        private long m_Id;
        private tList m_Numeros;
        private string m_Observaciones;
        private string  m_Premio;
        private CartonBingoManager m_Ganadores;
               
        private IStrategy m_Strategy;

        public Sorteo()
        {

        }

        public Sorteo(IStrategy pStrategy)
        {
            m_Strategy = pStrategy;
        }

        #region Propiedades
        public CartonBingoManager Ganadores
        {
            get
            {
                if (m_Ganadores == null)
                {
                    m_Ganadores = CartonBingoManager.FindGanadores(this);
                }
                return m_Ganadores; }
            set { m_Ganadores = value; }
        }
        
        public string Premio
        {
            get { return m_Premio; }
            set { m_Premio = value; }
        }
        public eEstadoSorteo EstadoSorteo
        {
            get
            {
                return m_EstadoSorteo;
            }
            set
            {
                m_EstadoSorteo = value;
            }
        }

        public long Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }

        public tList Numeros
        {
            get
            {
                return m_Numeros;
            }
            set
            {
                m_Numeros = value;
            }
        }

        public string Observaciones
        {
            get
            {
                return m_Observaciones;
            }
            set
            {
                m_Observaciones = value;
            }
        } 
        #endregion

        /// <summary>
        /// Este metodo recibe la lista de cartones de este bingo, y devuelve los ganadores.
        /// Antes de llamar a este metodo asegurarse que Strategy este seteada
        /// </summary>
        /// <param name="pCartones"></param>
        /// <returns>Coleccion de cartones ganadores.</returns>
        /// <exception>ValorNoEstablecido.</exception> 
        
        // este si es el metodo de buscar ganadores en medio de un sorteo
        public CartonGanadorManager ObtenerGanadores(CartonBingoManager pCartones)
        {
            if (m_Strategy == null) throw new Exception("Se debe setear la estrategia de calculo antes de llamar a este metodo.");  
            return m_Strategy.ObtenerGanadores(pCartones, m_Numeros);
        }

        /// <summary>
        /// Este metodo establece la estrategia para calcular los ganadores.
        /// </summary>
        /// <param name="pStrategy"></param>
        public void setStrategy(IStrategy pStrategy)
        {
            m_Strategy = pStrategy;
        }


        public void Save(long pIdBingo)
        {
            ParameterManager pM = new ParameterManager();
            pM.Add("Id", m_Id, true);
            pM.Add("IdBingo", pIdBingo); 
            if(m_Numeros!=null)pM.Add("Numeros", m_Numeros.Serialize());
            if(m_Observaciones!=null)pM.Add("Observaciones", m_Observaciones);
            pM.Add("IdEstadoSorteo", m_EstadoSorteo);
            if(m_Premio!=null)pM.Add("Premio", m_Premio);
            if (m_Id == 0)
            {
                Id = BaseDatos.DB.ExecuteInsertCommandWithId(MyTables.Sorteo, pM);
            }
            else
            {
                BaseDatos.DB.ExecuteUpdateCommand(MyTables.Sorteo, pM);
            }
            //guardo los cartones ganadores
            if (m_EstadoSorteo==eEstadoSorteo.Finalizado)
            {   
                //despues inserto los ganadores
                foreach (CartonBingo cb in Ganadores)
                {
                    pM = new ParameterManager();
                    pM.Add("idSorteo",Id);
                    pM.Add("idCartonBingo", cb.Id);

                    try
                    {
                        BaseDatos.DB.ExecuteInsertCommand(MyTables.GanadorXSorteo, pM);
                    }
                    catch { };//lo ignoro porq muchas veces me va a dar que no se puede insertar el elemento
                        
                }
            }

        }

    }//end Sorteo 

    public class SorteoManager : List<Sorteo>
    {
        public SorteoManager()
        {

        }

        public void Save(long pIdBingo)
        {
            foreach (Sorteo s in this)
            {
                s.Save(pIdBingo);
            }
        }
        /// <summary>
        /// Retorna los sorteos asociados a ese bingo
        /// </summary>
        public static SorteoManager FindByBingo(long pIdBingo)
        {

            SorteoManager sM = new SorteoManager();
            Sorteo s = null;
            ParameterManager pM = new ParameterManager();
            pM.Add("idBingo", pIdBingo);

            DataTable dT = BaseDatos.DB.ExecuteSelectCommand(MyTables.Sorteo, pM);

            foreach (DataRow dr in dT.Rows)
            {

                s = new Sorteo();
                s.EstadoSorteo = (eEstadoSorteo)dr["idEstadoSorteo"];
                s.Id = long.Parse(dr["Id"].ToString());
                s.Numeros = new tList();
                s.Numeros.Load(dr["numeros"].ToString());
                s.Premio = dr["Premio"].ToString();
                s.Observaciones = dr["Observaciones"].ToString();
                sM.Add(s);
            }
            return sM;

        }

        /// <summary>
        /// Obtiene el proximo sorteo sin realizar
        /// </summary>
        /// <returns></returns>
        public Sorteo GetNext()
        {            
            foreach (Sorteo ss in this)
                {if (ss.EstadoSorteo == eEstadoSorteo.NoIniciado) return ss;}
            return null;
        }

        public SorteoManager GetByEstado(eEstadoSorteo pEstadoSorteo)
        {
            SorteoManager sorteos = new SorteoManager();
            foreach (Sorteo s in this)
            {
                if (s.EstadoSorteo == pEstadoSorteo) sorteos.Add(s);
            }
            return sorteos;
        }
        
        public Sorteo GetById(long pId)
        {
            foreach (Sorteo m in this)
            {
                if (m.Id == pId) return m;
            }
            return null;
        }
    }
}