///////////////////////////////////////////////////////////
//  CartonBingo.cs
//  Implementation of the Class CartonBingo
//  Generated by Enterprise Architect
//  Created on:      07-Ago-2009 09:05:02 p.m.
//  Original author: tbrSoft
///////////////////////////////////////////////////////////

using DataBaseManager;
namespace BLBingo
{        
    /// <summary>
    /// Esta clase da la relacion entre los cartones y un bingo.
    /// </summary>
    /// 
    public class CartonBingo:IListable 
    {       
        private eEstadoCarton m_Estado;
        private long m_Id;
        /// <summary>
        /// El nro de carton se puede repetir en diferentes sorteos, por eso no se usa de id.        /// 
        /// (andresP) Seria bastante logico usar un id compuesto con Bingo y numero carton, pero....
        /// </summary>
        private long m_NroCarton;
        private Vendedor m_Vendedor;
        private Comprador m_Comprador;
        private Carton m_Carton;
  
        public CartonBingo()
        {

        }
       
        #region Propiedades
        public Vendedor Vendedor
        {
            get { return m_Vendedor; }
            set { m_Vendedor = value; }
        }

        public Comprador Comprador
        {
            get { return m_Comprador; }
            set { m_Comprador = value; }
        }
        
        public Carton Carton
        {
            get { return m_Carton; }
            set { m_Carton = value; }
        }
        public eEstadoCarton Estado
        {
            get
            {
                return m_Estado;
            }
            set
            {
                m_Estado = value;
            }
        }

        public long Id
        {
            get
            {
                return m_Id;
            }
            set
            {
                m_Id = value;
            }
        }

        public long NroCarton
        {
            get
            {
                return m_NroCarton;
            }
            set
            {
                m_NroCarton = value;
            }
        } 
        #endregion

        /// <summary>
        /// Este save se llama en registrar venta.
        /// </summary>
        public void Save()
        {
            ParameterManager pM = new ParameterManager();
            pM.Add("idEstado", m_Estado);
            pM.Add("Id", m_Id, true);
           
            if (Comprador != null)
            {
                pM.Add("idComprador", m_Comprador.Id);
            }
           
            if (m_Id == 0)
            {
                //es un error!
            }
            else
            {
                BaseDatos.DB.ExecuteUpdateCommand(MyTables.CartonBingo, pM);
            }
        }

        public void Save(long pIdBingo)
        {
            ParameterManager pM = new ParameterManager();
            pM.Add("idEstado", m_Estado);
            pM.Add("Id", m_Id, true);
            pM.Add("idCarton", m_Carton.Id);
            pM.Add("NroCarton", m_NroCarton);
            if (Vendedor != null)
            {
                pM.Add("idVendedor", m_Vendedor.Id);
            }
            if (Comprador != null)
            {
                pM.Add("idComprador", m_Comprador.Id);
            }
            pM.Add("idBingo", pIdBingo);

            if (m_Id == 0)
            {
                m_Id = BaseDatos.DB.ExecuteInsertCommandWithId(MyTables.CartonBingo, pM);
            }
            else
            {
                BaseDatos.DB.ExecuteUpdateCommand(MyTables.CartonBingo, pM);
            }
        }


        #region Miembros de IListable

        public string GetProperty(string pPropertyName)
        {
            string val = "";
            switch (pPropertyName.ToLower())
            {                
                case "cartonnumeros":
                    val = Carton.Numeros.Serialize(" - "); 
                    break;
                case "gpcomprador":
                    val = Comprador == null ? "Sin Asignar" : Comprador.NombreFormal;
                    break;                
                case "gpvendedor":
                    val = Vendedor == null ? "Sin Asignar" : Vendedor.NombreFormal;                    
                    break;                    
                default:
                    break;
            }
            return val;
        }

        #endregion
    }
}