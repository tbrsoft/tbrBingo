///////////////////////////////////////////////////////////
//  CartonManager.cs
//  Implementation of the Class CartonManager
//  Generated by Enterprise Architect
//  Created on:      07-Ago-2009 09:05:07 p.m.
//  Original author: Paliza Martin
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System;
using System.Data;
using DataBaseManager;

namespace BLBingo
{
    public class CartonManager:List<Carton>
    {

        public CartonManager()
        {

        }
        /// 
        /// <param name="pCantidad"></param>
        /// Los cartones tienen que estar generados con id's Consecutivos
        public  CartonManager Generate(long pCantidad)
			// por que en vez de cargar este CM devuelve otro generado ?. 
			// Es domingo y son las 00:20, puedo estar no-entendiendo
			// por que no "void Generate" y que carge this ?
        {
			GenerateCartonsOnce g=new GenerateCartonsOnce();
            return g.NewSerie(pCantidad);            
        }

        /// 
        /// <param name="pCantidad"></param>
        public static CartonManager GetRandom(long pCantidad)
        {
            int aux=0;
            CartonManager cM = new CartonManager();
            Random r = new Random(DateTime.Now.Millisecond);
            //TODO Facilmente Optimizable usando array
            tList t = new tList();
            //Pido el max id de la tabla cartones. Es decir la cantidad de cartones. 
            //Los cartones tienen que estar generados con idConsecutivos
            
            //DataTable dt = BaseDatos.DB.ExecuteSelectCommand(MyTables.Carton);
            //int max = dt.Rows.Count;

            int max =int.Parse( BaseDatos.DB.ExecuteSQLCommand("select count(id) from carton").Rows[0][0].ToString());
            
            if (max <= pCantidad)
            {//parece que no hay cartones
                // TODO: ERROR !!!
                #warning Ver que hacer si max < pCantidad
            }


            for (int i = 0; i < max; i++)
            {
                t.Add(i);                
            }

            

            for (int i = 0; i < pCantidad; i++)
            {
                aux = r.Next(0, t.Count);
                cM.Add(new Carton(t[aux]));
                t.RemoveAt(aux);             
            }
            return cM;
        }

        public void Save() {
            foreach (Carton var in this)
            {
                var.Save();
            }
        
        }
    }//end CartonManager 
}