///////////////////////////////////////////////////////////
//  CartonBingoManager.cs
//  Implementation of the Class CartonBingoManager
//  Generated by Enterprise Architect
//  Created on:      07-Ago-2009 09:05:08 p.m.
//  Original author: tbrSoft
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using DataBaseManager;
using System.Data;
using System.Text;

namespace BLBingo
{
    public delegate void ProgressEventHandler(int pProgress);


    public class CartonBingoManager:List<CartonBingo>
    {
        public event ProgressEventHandler Progressing;

        public CartonBingoManager()
        {

        }               
       
        /// 
        /// <param name="pIdBingo"></param>
        public static CartonBingoManager FindByBingo(long pIdBingo)
        {
            VendedorManager vendedores = VendedorManager.FindAll(); 
                        
            //esto es para que sea mas eficiente... (o eso creemos)                                    
            DataTable dT = BaseDatos.DB.ExecuteSQLCommand("SELECT * from cartonbingoconcomprador where idBingo=" + pIdBingo.ToString());

            return LoadFromTable(vendedores, dT);
        }

        //andresv, segun parece es solo ganadores anteriores en la base de datos y no la verificacion despues de cada numero en medio de un sorteo
        internal static CartonBingoManager FindGanadores(Sorteo pSorteo)
        { 
            VendedorManager vendedores = VendedorManager.FindAll(); 
            
            DataTable dt = BaseDatos.DB.ExecuteSQLCommand("Select * from CartonBingoConComprador cb, GanadorxSorteo gs where gs.idSorteo="+pSorteo.Id.ToString()+" and gs.idCartonBingo=CartonBingo.id");
            return LoadFromTable(vendedores, dt);
        }
        private static CartonBingoManager LoadFromTable(VendedorManager vendedores, DataTable dT)
        {
            CartonBingoManager cBM = new CartonBingoManager();
            CartonBingo cB = null;
            foreach (DataRow dr in dT.Rows)
            {
                cB = new CartonBingo();
                if (dr["IdComprador"].ToString() != "")
                {
                    cB.Comprador = CompradorManager.GetCompradorFromDR(dr, "idComprador");
                }
                if (dr["IdVendedor"].ToString() != "")
                {
                    cB.Vendedor = vendedores.GetById(long.Parse(dr["IdVendedor"].ToString()));
                }
                cB.Estado = (eEstadoCarton)dr["idEstado"];
                cB.Id = long.Parse(dr["cartonBingo.Id"].ToString());
                cB.NroCarton = long.Parse(dr["nroCarton"].ToString());
                cB.Carton = new Carton(long.Parse(dr["idCarton"].ToString()), dr["numeros"].ToString());
                cBM.Add(cB);
            }

            return cBM;
        }

        /// <summary>
        /// Retorna el cartonbingo asociado al carton.
        /// </summary>
        /// <param name="pCarton"></param>
        public CartonBingoManager GetByCarton(Carton pCarton)
        {
            return null; 
        }
        public CartonBingo GetByNroCarton(long pNroCarton)
        {
            foreach (CartonBingo  cb in this)
            {
                if (cb.NroCarton == pNroCarton) return cb;
            }
            return null;
        }
        public CartonBingoManager GetByVendedor(Vendedor pVendedor)
        {
            CartonBingoManager cartones = new CartonBingoManager();
            foreach (CartonBingo cb in this)
            {
                if (cb.Vendedor != null)
                {
                    if (cb.Vendedor.Id == pVendedor.Id)
                    {
                        cartones.Add(cb);
                    }
                }
            }

            return cartones;
        }

        /// 
        /// <param name="pEstadoCarton"></param>
        public CartonBingoManager GetByEstado(eEstadoCarton pEstadoCarton)
        {
            CartonBingoManager cartones = new CartonBingoManager();
            foreach (CartonBingo cb in this)
            {
                if (cb.Estado == pEstadoCarton) cartones.Add(cb);
            }
            return cartones;
        }

        public CartonBingoManager GetRandom(int pCantidad)
        {
            long l = 0;
            CartonBingo cB = null;
            CartonManager cM = CartonManager.GetRandom(pCantidad);
            foreach (Carton  var in cM)
            {
                l++;                
                cB = new CartonBingo();
                cB.Id = 0;
                cB.NroCarton = l;
                cB.Carton = var;
                cB.Estado = eEstadoCarton.SinAsignar;
                this.Add(cB);                    
            }
           
            return this;
        }
        /// <summary>
        /// Carga una lista de cartonesBingo cuyos id esten entre pInicio y pFin
        /// No carga los cartones asociados a los cartonesBingo
        /// </summary>
        /// <param name="pInicio"></param>
        /// <param name="pFin"></param>
        public void LoadByRango(Bingo pBingo, long pInicio, long pFin)
        {
            CartonBingo cB;
            DataTable dt = BaseDatos.DB.ExecuteSQLCommand("select * from "+ MyTables.CartonBingo+" where idBingo= "+pBingo.Id +" and nroCarton between "+pInicio + " and "+pFin);
            foreach (DataRow dr in dt.Rows)
            {
                cB = new CartonBingo();
                //   cB.Comprador = CompradorManager.FindById(long.Parse(dr["IdComprador"].ToString()));
                cB.Estado = (eEstadoCarton)dr["idEstado"];
                cB.Id = long.Parse(dr["Id"].ToString());
                cB.NroCarton = long.Parse(dr["nroCarton"].ToString());
                string aux = dr["IdVendedor"].ToString();
                if (aux != "")
                {
                    cB.Vendedor = VendedorManager.FindById(long.Parse(aux));
                }
                else {
                    cB.Vendedor = null;
                }
//                cB.Carton = new Carton(long.Parse(dr["idCarton"].ToString()), dr["numeros"].ToString());
                this.Add(cB);
            }
        }

        /// <summary>
        /// La coleccion tiene que haberse cargado con la funcion loadByRango
        /// </summary>
        public void AsignarVendedor(long pIdVendedor) {

            long min = long.MaxValue ;
            long max= 0;
            foreach (CartonBingo var in this)
            {
                if (var.NroCarton < min) min = var.NroCarton;
                if (var.NroCarton > max) max = var.NroCarton;
            }

            BaseDatos.DB.ExecuteSQLCommand("update " + MyTables.CartonBingo + " set idvendedor= " + pIdVendedor.ToString()  + ", idEstado=3 where nroCarton between " + min.ToString() + " and " + max.ToString());           
        }

        public void Save(long pIdBingo)
        {
            int i = 0; 
            foreach (CartonBingo var in this)
            {
                var.Save(pIdBingo);
                if (Progressing != null)
                {
                    Progressing(i++); 
                }
            }
        }

        public static CartonBingo FindByIdByBingo(long idCartonBingo, Bingo bingo)
        {
            throw new System.Exception("The method or operation is not implemented.");
        }
        
        /// <summary>
        /// Obtiene los cartones para generar el archivo para enviar a las agencias.
        /// </summary>
        /// <param name="pVendedor"></param>
        /// <param name="pBingo"></param>
        /// <returns></returns>
        public static DataTable FindByVendedorByBingo(Vendedor pVendedor, Bingo pBingo)
        {//numerocarton, nombre, apellido,dni, telefono, direccion, mail, observaciones, idBingo, idvendedor
            //return BaseDatos.DB.ExecuteSQLCommand("Select * from cartonbingoconcomprador where idvendedor="+pVendedor.Id+" and idBingo="+pBingo.Id);
            return BaseDatos.DB.ExecuteSQLCommand("Select NroCarton,Numeros, Nombre, Apellido,Dni, Telefono, Direccion, Mail, Observaciones, idBingo, idvendedor from cartonbingoconcomprador where idvendedor="+pVendedor.Id+" and idBingo="+pBingo.Id);
        }
               
    }
}